#!/usr/bin/env python

"""emitcalc: computes

Example calls:
 > ./bin/emitcalc 1 10 -i ./test/data/truncated-consume-output.json
"""

__author__      = "Joel Dubowy"

import json
import logging
import sys
import traceback

import afscripting as scripting
from emitcalc.calculator import EmissionsCalculator
from eflookup.fepsef import FepsEFLookup
from eflookup.fccs2ef import Fccs2Ef, CoverType2Ef

# Note: though some argue that all required parameters should be specified as
# positional arguments, I prefer using 'options' flags, even though this
# means that there are required 'options', which is oxymoronic.

REQUIRED_ARGS = []

OPTIONAL_ARGS = [
    {
        'short': '-f',
        'long': '--fccs-fuelbed-id',
        'help': ("FCCS id; if specified, will use Prichard/O'Neill "
            'emissions factors model')
    },
    {
        'short': '-c',
        'long': '--cover-type-id',
        'help': ("Covertype id; if specified, will use Prichard/O'Neill "
            'emissions factors model')
    },
    {
        'long': '--rx',
        'help': "Is a prescribed burn",
        'action': 'store_true',
        'default': False
    },
    {
        'short': '-i',
        'long': '--input-file',
        'help': 'input file comtaining JSON formatted consume output'
    },
    {
        'short': '-o',
        'long': '--output-file',
        'help': 'output file comtaining JSON formatted consomue output'
    },
    {
        'short': '-s',
        'long': '--species',
        'action': 'append',
        #'default': []
    },
    {
        'long': '--output-efs',
        'action': 'store_true',
        "help": "Display emissions factors used to calculate the emissions values"
        #'default': []
    },
    {
        'long': '--indent',
        'type': int,
        "help": "Indentation used when dumping json output"
    }
]

EPILOG_STR = """

Examples

    $ echo '{{
        "litter-lichen-moss": {{
            "litter": {{
                "smoldering": [0.14949327591400063, 0.2],
                "total": [1.4949327591400063, 0.34],
                "flaming": [1.3454394832260057, 0.14],
                "residual": [0.0, 0.0]
            }},
            "lichen": {{
                "smoldering": [0.0, 0.0],
                "total": [0.0, 0.0],
                "flaming": [0.0, 0.0],
                "residual": [0.0, 0.0]
            }},
            "moss": {{
                "smoldering": [0.0, 0.0],
                "total": [0.0, 0.0],
                "flaming": [0.0, 0.0],
                "residual": [0.0, 0.0]
            }}
        }}
    }}' | {script_name} --indent 4 | less

    $ {script_name} -i ./test/data/truncated-consume-output.json \\
        -f 52 --rx -s PM2.5 -s CO2 --indent 4 | less

 """.format(script_name=sys.argv[0])

def _stream(file_name, flag): #, do_strip_newlines):
    if file_name:
        return open(file_name, flag)
    else:
        if flag == 'r':
            return sys.stdin
        else:
            return sys.stdout


if __name__ == "__main__":
    parser, args = scripting.args.parse_args(REQUIRED_ARGS, OPTIONAL_ARGS,
        epilog=EPILOG_STR)
    if args.fccs_fuelbed_id and args.cover_type_id:
        sys.write("{script_name}: error: `-f'/'--fccs-fuelbed-id' and "
            "'-c'/'--cover-type-id' can't be specified together.\n".format(
            script_name=sys.argv[0]))
        sys.exit(1)

    try:
        data = json.loads(''.join([d for d in _stream(args.input_file, 'r')]))
        if args.fccs_fuelbed_id:
            lookup = Fccs2Ef(args.fccs_fuelbed_id, args.rx)
        elif args.cover_type_id:
            lookup = CoverType2Ef(args.cover_type_id, args.rx)
        else:
            # Note: args.rx doesn't come into play
            lookup = FepsEFLookup()
        calculator = EmissionsCalculator(lookup,
            species=args.species or [])
        emissions = calculator.calculate(data)
        _stream(args.output_file, 'w').write(json.dumps(emissions, indent=args.indent))
        if args.output_efs:
            _stream(args.output_file, 'a').write('\n' + json.dumps(
                calculator.emissions_factors, indent=args.indent))

    except Exception as e:
        logging.info(traceback.format_exc())
        scripting.utils.exit_with_msg(str(e))
