#!/usr/bin/env python

"""emitcalc: computes

Example calls:
 > ./bin/emitcalc 1 10 -i ./test/data/truncated-consume-output.json
"""

__author__      = "Joel Dubowy"

import json
import logging
import sys
import traceback

from pyairfire import scripting

from emitcalc.calculator import EmissionsCalculator
from eflookup.fepsef import FepsEFLookup

# Note: though some argue that all required parameters should be specified as
# positional arguments, I prefer using 'options' flags, even though this
# means that there are required 'options', which is oxymoronic.

REQUIRED_ARGS = []

OPTIONAL_ARGS = [
    {
        'short': '-i',
        'long': '--input-file',
        'dest': 'input_file',
        'help': 'input file comtaining JSON formatted consume output',
        'action': "store",
        'default': None
    },
    {
        'short': '-o',
        'long': '--output-file',
        'dest': 'output_file',
        'help': 'output file comtaining JSON formatted consomue output',
        'action': "store",
        'default': None
    }
]

EPILOG_STR = """

Examples

    $ echo '{
        "litter-lichen-moss": {
            "litter": {
                "smoldering": [0.14949327591400063, 0.2],
                "total": [1.4949327591400063, 0.34],
                "flaming": [1.3454394832260057, 0.14],
                "residual": [0.0, 0.0]
            },
            "lichen": {
                "smoldering": [0.0, 0.0],
                "total": [0.0, 0.0],
                "flaming": [0.0, 0.0],
                "residual": [0.0, 0.0]
            },
            "moss": {
                "smoldering": [0.0, 0.0],
                "total": [0.0, 0.0],
                "flaming": [0.0, 0.0],
                "residual": [0.0, 0.0]
            }
        }
    }' | emitcalc | python -m json.tool | less


 """

def _stream(file_name, flag): #, do_strip_newlines):
    if file_name:
        return open(file_name, flag)
    else:
        if flag == 'r':
            return sys.stdin
        else:
            return sys.stdout


if __name__ == "__main__":
    parser, args = scripting.args.parse_args(REQUIRED_ARGS, OPTIONAL_ARGS,
        epilog=EPILOG_STR)

    try:
        data = json.loads(''.join([d for d in _stream(args.input_file, 'r')]))
        calculator = EmissionsCalculator(FepsEFLookup())
        emissions = calculator.calculate(data)
        _stream(args.output_file, 'w').write(json.dumps(emissions))

    except Exception as e:
        logging.info(traceback.format_exc())
        scripting.utils.exit_with_msg(str(e))
